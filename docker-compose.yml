version: '3.7'
services:

    #PHP Service
    app:
        build:
            context: .
            dockerfile: Dockerfile
        image: veneziastone-app/php
        container_name: app
        restart: unless-stopped
        tty: true
        environment:
            SERVICE_NAME: app
            SERVICE_TAGS: dev
        working_dir: /var/www
        volumes:
            - ./:/var/www
            - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
        networks:
            - app-network

    #Nginx Service
    webserver:
        image: nginx:alpine
        container_name: webserver
        restart: unless-stopped
        tty: true
        ports:
            - "80:80"
            - "447:443"
        volumes:
            - ./:/var/www
            - ./nginx/conf.d/:/etc/nginx/conf.d/
        networks:
            - app-network

    #MySQL Service
    db:
        image: mysql:8.0.34
        container_name: db
        restart: unless-stopped
        tty: true
        ports:
            - "33006:3306"
        environment:
            MYSQL_DATABASE: laravel
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
            SERVICE_TAGS: dev
            SERVICE_NAME: mysql
            TZ: Europe/Moscow
        volumes:
            - dbdata:/var/lib/mysql
            - ./mysql/my.cnf:/etc/mysql/my.cnf
        networks:
            - app-network

    #phpMyAdmin container
    phpmyadmin:
        # Use phpmyadmin/phpmyadmin:latest image
        image: phpmyadmin/phpmyadmin:latest
        # Connect to "drfoxg-net" network, as defined below
        networks:
            - app-network
        # Map port 8033 on the host to port 80 inside the container
        # Syntax is: "HOST_PORT:CONTAINER_PORT"
        ports:
            - "8033:80"
        # Pass a list of environment variables to the container
        environment:
            PMA_HOST: db
            UPLOAD_LIMIT: 256M
            MAX_EXECUTION_TIME: 3000
        # Wait for "mysql" container to start first
        depends_on:
            - db

#Docker Networks
networks:
    app-network:
        driver: bridge

#Volumes
volumes:
    dbdata:
        driver: local
